{
  "name": "FitForge - Real Data Architecture",
  "description": "Data-driven fitness ecosystem with transparent calculations and no mock data",
  "version": "3.0.0",
  "type": "full-stack-typescript",
  "architecture": "real-data-driven",
  "commands": {
    "/load": "Load project context and current development status",
    "/implement": "Implement features using database-first methodology",
    "/quality": "Run TypeScript validation and real data tests",
    "/process": "Enforce git workflow and commit real changes",
    "/architect": "Run complete project scaffolding with HDTA templates"
  },
  "keyPaths": {
    "systemManifest": "memory-bank/system_manifest_data_driven.md",
    "databaseSchema": "memory-bank/database_schema_module.md",
    "userDataEntry": "memory-bank/user_data_entry_module.md",
    "progressCalculations": "memory-bank/progress_calculations_module.md",
    "realDataPlan": "memory-bank/implementation_plan_real_data_architecture.md",
    "projectRoadmap": "memory-bank/project_roadmap_data_driven.md",
    "mainConfig": "CLAUDE.md",
    "packageJson": "package.json",
    "architecture": "ARCHITECTURE.md"
  },
  "dataArchitecture": {
    "philosophy": "Every feature driven by real user-entered data",
    "noMockData": true,
    "formulaTransparency": true,
    "databaseFirst": true,
    "userDataPaths": [
      "data/users/{userId}/workouts.json",
      "data/users/{userId}/preferences.json",
      "data/users/{userId}/body-stats.json",
      "data/users/{userId}/goals.json"
    ],
    "universalData": [
      "data/exercises/universal-exercise-database.json"
    ]
  },
  "metadata": {
    "lastSync": "2025-06-01T21:30:00.000Z",
    "completedPhases": ["Phase1_DatabaseFoundation", "Phase2_UserDataEntry", "Phase3_SupabaseMigration", "Phase4_UserGoalsSystem"],
    "currentPhase": "Phase5_ProductionDeployment",
    "lastMajorAccomplishment": "Complete User Goals System implementation - 12/12 tasks finished via parallel workstream development, production-ready"
  },
  "developmentWorkflow": [
    "1. Design database schema first",
    "2. Build user data entry forms",
    "3. Create API endpoints for real data",
    "4. Implement formula-based calculations",
    "5. Build UI showing real data or formulas",
    "6. Test with real user input scenarios"
  ],
  "testingStrategy": {
    "primary": "MCP BrowserMCP for user flow testing",
    "dataValidation": "Real user input scenarios only",
    "missingData": "Test behavior without data",
    "formulaAccuracy": "Verify mathematical calculations"
  },
  "codeStandards": {
    "typescript": "Full coverage, no any types",
    "react": "Functional components with hooks",
    "validation": "Zod schemas for all user input",
    "apiDesign": "RESTful with real data only",
    "uiFramework": "Radix UI + Tailwind CSS"
  }
}